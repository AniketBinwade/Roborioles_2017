// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"

#include "AutoGearPlacement.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	//sets motors to brake
	Robot::driveBase->setCoastBreak(false);
	RobotMap::sonar1 = new Ultrasonic(0,1);
	RobotMap::sonar1->SetAutomaticMode(true);
	RobotMap::sonar2 = new Ultrasonic(2,3);
	RobotMap::sonar2->SetAutomaticMode(true);
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {

	cmd.reset(new AutoGearPlacement(true));
	cmd->Start();
	bool shouldStop = false;
	double distance = RobotMap::sonar1->GetRangeInches();
	if(distance<12){
		shouldStop = true;
	}
	if(shouldStop == false){
		Robot::driveBase->straightAutonMethod(0.5, distance);
	}else{
		Robot::driveBase->straightAutonMethod(0,0);
	}
	//Robot::driveBase->straightAutonMethod(.4,1000);
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
    return true;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	//sets motors to coast
	Robot::driveBase->setCoastBreak(true);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {

}
