// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveBase.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Move.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveBase::DriveBase() : Subsystem("DriveBase") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    left1 = RobotMap::driveBaseLeft1;
    left2 = RobotMap::driveBaseLeft2;
    right1 = RobotMap::driveBaseRight1;
    right2 = RobotMap::driveBaseRight2;
    robotDrive41 = RobotMap::driveBaseRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	g = new ADXRS450_Gyro(SPI::Port::kOnboardCS0);
}

void DriveBase::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new Move());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveBase::DriveWithJoysticks() {
	float left= (Robot::oi->getLeftJoystick()->GetY());
	float right= (Robot::oi->getRightJoystick()->GetY());

	robotDrive41->TankDrive(-left,right);
}

void DriveBase::DriveWithGamepad() {
	float left= (Robot::oi->getGamePad()->GetY());
	float right= (Robot::oi->getGamePad()->GetThrottle());

	robotDrive41->TankDrive(-left,right);
}

void DriveBase::driveMethod(float left, float right) {
	robotDrive41->TankDrive(-left,right);
}

double DriveBase::getGAngle() {
	return Robot::driveBase->g->GetAngle();
}

void DriveBase::ResetGyro() {
	 Robot::driveBase->g->Reset();
}

void DriveBase::SetExp() {
	left1->SetExpiration(5000);
	left1->SetSafetyEnabled(false);
	left2->SetExpiration(5000);
	left2->SetSafetyEnabled(false);
	right1->SetExpiration(5000);
	right1->SetSafetyEnabled(false);
	right2->SetExpiration(5000);
	right2->SetSafetyEnabled(false);
	robotDrive41->SetExpiration(5000);
	robotDrive41->SetSafetyEnabled(false);
}

void DriveBase::ResetEncoders() {
		Robot::driveBase->left1->SetEncPosition(0);
		Robot::driveBase->right1->SetEncPosition(0);
}

bool DriveBase::CompareEncoders(double distance) {
	if ((distance > 0 && Robot::driveBase->left1->GetEncPosition() >= distance && Robot::driveBase->right1->GetEncPosition() >= distance) || (distance < 0 && Robot::driveBase->left1->GetEncPosition() <= distance && Robot::driveBase->right1->GetEncPosition() <= distance)) {
		return true;
	}
	return false;
}

double DriveBase::getLeftEncPos() {
	return Robot::driveBase->left1->GetEncPosition();
}

double DriveBase::getRightEncPos() {
	return Robot::driveBase->right1->GetEncPosition();
}

void DriveBase::straightAutonMethod(double speed, double distance) {
	if (Robot::driveBase->getLeftEncPos() > distance && Robot::driveBase->getLeftEncPos() > distance){
		if (Robot::driveBase->getGAngle() > -1) {
			//veering right
			Robot::driveBase->left1->Set((speed-(getGAngle()*0.01)));
			Robot::driveBase->right1->Set((speed+(getGAngle()*0.01)));
			Robot::driveBase->left2->Set((speed-(getGAngle()*0.01)));
			Robot::driveBase->right2->Set((speed+(getGAngle()*0.01)));
		} else if (Robot::driveBase->getGAngle() < 1) {
			//veering left
			Robot::driveBase->left1->Set((speed-(getGAngle()*0.01)));
			Robot::driveBase->right1->Set((speed+(getGAngle()*0.01)));
			Robot::driveBase->left2->Set((speed-(getGAngle()*0.01)));
			Robot::driveBase->right2->Set((speed+(getGAngle()*0.01)));
		} else {
			Robot::driveBase->left1->Set(speed);
			Robot::driveBase->right1->Set(speed);
			Robot::driveBase->left2->Set(speed);
			Robot::driveBase->right2->Set(speed);
		}
	} else {
		Robot::driveBase->driveMethod(0,0);
	}
}

void DriveBase::AutoDriveFeet(){
	left1->Set(-0.95);
	left2->Set(-0.95);
	right1->Set(1);
	right2->Set(1);
	Wait(1);
	left1->Set(0);
	left2->Set(0);
	right1->Set(0);
	right2->Set(0);

}

void DriveBase::setCoastBreak(bool type) {
	//if bool is true, set it to coast. if bool is false, set it to brake
	if(type) {
		left1->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
		left2->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
		right1->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
		right2->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
	} else {
		left1->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
		left2->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
		right1->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
		right2->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
	}


}
